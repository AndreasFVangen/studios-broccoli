"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
function $args(func) {
    return (func + '')
        .replace(/[/][/].*$/mg, '') // strip single-line comments
        .replace(/\s+/g, '') // strip white space
        .replace(/[/][*][^/*]*[*][/]/g, '') // strip multi-line comments
        .split('){', 1)[0].replace(/^[^(]*[(]/, '') // extract the parameters
        .split(',').filter(Boolean); // split & filter [""]
}
exports.$args = $args;
function getGraphQLType(type) {
    type = type.toLowerCase();
    if (type == "string") {
        return graphql_1.GraphQLString;
    }
    if (type == "number") {
        return graphql_1.GraphQLFloat;
    }
    if (type == "boolean") {
        return graphql_1.GraphQLBoolean;
    }
}
exports.getGraphQLType = getGraphQLType;
function createIfObjectNotExist(name, models, description) {
    if (!models[name]) {
        models[name] = new graphql_1.GraphQLObjectType({
            name: name,
            fields: {},
            description: description || ''
        });
    }
    else if (description) {
        models[name].description = description;
    }
}
exports.createIfObjectNotExist = createIfObjectNotExist;
function createInputObjectIfNotExist(target, obj) {
    if (!obj[target.constructor.name]) {
        obj[target.constructor.name] = new graphql_1.GraphQLInputObjectType({
            name: target.constructor.name,
            fields: {}
        });
    }
}
exports.createInputObjectIfNotExist = createInputObjectIfNotExist;
function getArgs(target, key, params) {
    return $args(target[key]).map(function (item, i) {
        return { name: item, type: params[i].name };
    });
}
exports.getArgs = getArgs;
function convertArgsToGraphQL(args, argsRequired, inputs) {
    var temp = {};
    args.forEach(function (item) {
        if (item.name == '_context')
            return;
        let type = getGraphQLType(item.type);
        if (!type && inputs) {
            type = inputs[item.type];
        }
        if (!type)
            throw new Error(`${item.name} must have a knowing type`);
        if (argsRequired.indexOf(item.name) != -1) {
            temp[item.name] = { "type": new graphql_1.GraphQLNonNull(type) };
        }
        else {
            temp[item.name] = { "type": type };
        }
    });
    return temp;
}
exports.convertArgsToGraphQL = convertArgsToGraphQL;
